<!DOCTYPE html>
<html>
  <head>
    <title>machineSpiritClaude</title>
    <%= stylesheet_link_tag 'application', media: 'all' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag "jquery", "jquery_ujs" %>
    <%= csrf_meta_tags %>
    <link rel="manifest" href='manifest.json'>
    <meta name="csrf-token" content="<%= form_authenticity_token%>">
    <%= favicon_link_tag 'favicon.ico' %>
    <%= favicon_link_tag 'apple-touch-icon.png', rel: 'apple-touch-icon', type: 'image/png' %>
    <%= javascript_include_tag 'stripe_payment', 'data-turbolinks-track': 'reload' %>

    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <script src="https://unpkg.com/@rails/ujs"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
 <script>

   document.addEventListener("DOMContentLoaded", function () {
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();
  recognition.continuous = true; // Keep listening until stopped manually

  const voiceToTextButton = document.getElementById("voice-to-text");
  const conversationButton = document.getElementById("conversation");
  const loadingAnimation = document.querySelector('.lds-roller'); // Define loading animation here

  recognition.onresult = function (event) {
    const transcript = event.results[event.resultIndex][0].transcript;

    if (event.results[event.resultIndex].isFinal) { // Transcript is final
      const textField = document.getElementById("query-input");
      textField.value = transcript;

      // Show loading animation
      loadingAnimation.style.display = 'inline-block';

      // submit the form here
      document.querySelector('form').submit();

      // stop the recognition after form submit
      recognition.stop();
    }
  };

  recognition.onend = function() {
    // Hide loading animation
    loadingAnimation.style.display = 'none';
    
  }

  if (voiceToTextButton) {
    voiceToTextButton.addEventListener("click", function () {
      recognition.start();
    });
  }

  if (conversationButton) {
    conversationButton.addEventListener("click", function () {
         alert("Conversation Mode Activated! machineSpiritClaude will listen for your speech, and then read then submit your response to the AI.");
      loadingAnimation.style.display = 'inline-block';
      recognition.start();
      
    });
  }
});



   function readResponseAloud(assistantResponse) {
  console.log("Assistant response: ", assistantResponse);
  const voiceId = '21m00Tcm4TlvDq8ikWAM';
  const apiKey = '<%= ENV["ELEVENLABS_API_KEY"] %>';

  const xhr = new XMLHttpRequest();
  xhr.open('POST', '/text-to-speech', true);
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.setRequestHeader('Authorization', `Bearer ${apiKey}`);
  xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
  xhr.responseType = 'arraybuffer'; // Set the response type to arraybuffer

  xhr.onload = function(e) {
    if (xhr.status === 200) {
      const audioBlob = new Blob([xhr.response], { type: 'audio/mpeg' }); // Create a Blob directly from the response
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      audio.play();
    } else {
      console.error("Error: Failed to request audio from Eleven Labs API.");
      alert("Error: Failed to request audio from Eleven Labs API.");
    }
  };
  xhr.send(JSON.stringify({ text: assistantResponse, voice_id: voiceId }));
}

 
 </script>
 <script>
   function copyToClipboard(text) {
  var tempInput = document.createElement('textarea');
  tempInput.style = 'position: absolute; left: -1000px; top: -1000px';
  tempInput.value = text;
  document.body.appendChild(tempInput);
  tempInput.select();
  document.execCommand('copy');
  document.body.removeChild(tempInput);
}
 </script>

 <script>
  
document.querySelectorAll('form').forEach((form) => {
  form.addEventListener('submit', function(event) {
    event.preventDefault(); // Prevents the default form submission.

    let loadingAnimation = document.querySelector('.lds-roller');
    loadingAnimation.style.display = 'inline-block'; // Display loading animation.

    fetch(this.action, {
      method: this.method,
      body: new FormData(this),
    })
    .then(response => response.json())
    .then(data => {
      // When request is successful.
      loadingAnimation.style.display = 'none'; // Hide loading animation.

      // Here you might want to do something with the data.
    })
    .catch((error) => {
      // When request fails.
      loadingAnimation.style.display = 'none'; // Hide loading animation.
      
      // Here you might want to handle errors.
      console.error('Error:', error);
    });
  });
});
  
 </script>

  </head>
  <body>
    
     <% flash.each do |key, value| %>
     <div class="alert alert-<%= key %> red-background alert-dismissible show" role="alert">
       <center><h4><%= value %></h5></center>
       <center><button type="button" class="btn-close custom-close-btn" data-bs-dismiss="alert" aria-label="Close">X</button></center>
     </div>
     <% end %>
    
     <%= render "layouts/navbar" %> 
     <%= yield %>
     <div class="container"> 
       <div class="row"> 
         <div class="col-md-6 mx-auto text-center"> 
           <h5><center>Artificial Intelligence Made Easy</center></h5> 
         </div> 
       </div> 
     </div> 
  </body>
</html>

