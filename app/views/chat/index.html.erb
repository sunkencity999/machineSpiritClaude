<div class="container" id="parent">
 
  <div class="row topText">
    <div class="col" class="lead">
      <main role="main" class="inner">
        <h1 class="cover-heading"><center>machineSpiritClaude</center></h1>
        <% unless current_user %>
        <h4><center> We make AI easy. Create emails, essays, and reports. Get great recipes. Receive smart and relevant answers to your questions. Translate into dozens of languages.Simple buttons and clean functionality, so you can put the responses and information to work.</center></h4>
        <h4><center> <i>Select the Menu option in your browser to 'Install machineSpiritClaude'. This will install the app on your phone/tablet/desktop.</i></center> </h4>
      <% end %>
        <div class="flex-grow-1 d-flex align-items-center justify-content-center">

          <div class="lds-roller">
           <div></div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
           <div></div>
         </div>
        </div>
          <%= render "layouts/loadingscreen" %>

        <hr class="mt-2 mb-2">
        <div class="row">
          <% if @conversation_history.present? %>
          <div class="col" id="responsebox">
            <% @conversation_history.each do |message| %>
              <p><h5><%= message[:role] %>:</h5><b><i><%= message[:text]%></i></b></p>
               <% if message[:role] == "Assistant" %>
                 <hr>
               <% end %>  
            <% end %>
          </div>
        <% end %>
        </div>

        <% if session[:generated_image_urls].present? %>
        <div class="image-container">
        <center>
          <% session[:generated_image_urls].each do |file_path| %>
          <img src="<%= file_path %>" alt="Generated image" style="max-width: 200px;">
        <% end %>
        </center>
        </div>
       <% end %>
 
         

         <% if @assistant_response.present? %>
        <% if user_signed_in? %>
        <div class="download-button text-center mt-3">
          <%= link_to 'Download as PDF',download_latest_response_chat_index_path , class: 'btn btn-sm btn-block' %>
              
        </div>
      
        <div class="read-aloud-button text-center mt-3">
        <%= button_tag "Read Response Aloud", type: "button", class: "btn btn-sm btn-block", id: "read-response-aloud" %>
        </div>
        <div class="text-center mt-3">
          <button onclick="copyToClipboard(document.getElementById('responsebox').innerText)" class="btn btn-sm btn-block">Copy to clipboard</button>
        </div>
        <div class="email-response-button text-center mt-3">
                <%= link_to 'Email Response', "mailto:?subject=Conversation%20Response&body=#{CGI::escape(@assistant_response)}", class: 'btn btn-sm btn-block' %>

        </div> 
        <% end %> 
        <% end %>
         

        <%= form_with url: { controller: "chat", action: "ask" }, method: :post, id: "ask_form",enctype: 'multipart/form-data' do |f| %>
     <div class="form-inline">
       <%= f.label :text, "Query the AI:" %>
       <%= f.text_field :text, class: "form-control input-width", autofocus: true, id: "query-input" %>
       <% if user_signed_in? %>
      
       <div class="col">  
       <%= f.check_box :subject_expert_mode, {checked: false}, "true", "false" %>
       <%= f.label :subject_expert_mode, "Expert Mode" %>
       </div>
       <div class="col">
       <%= f.check_box :creative_mode, {checked: false}, "true", "false" %>
       <%= f.label :creative_mode, "Creative Mode" %>
       </div>
       <div class="col">
       <%= f.check_box :generate_image, {checked: false}, "1", "0" %>
       <%= f.label :generate_image, "Generate Image" %>
       </div>
      

       <%= f.file_field :document %>
       <% end %>
       <%= f.hidden_field :save_conversation, value: user_signed_in? ? "1" : "0" %>
       <%= f.submit "Submit", class: "btn btn-sm mt-3 btn-block" %>
     </div>
      <% end %>


  <p>&nbsp;</p>
  <div class="row">
  
    <% if user_signed_in? %>
      <div class="col-md-12 d-flex justify-content-center">
        <%= button_tag "Conversation", type: "button", class: "btn btn-sm btn-block", id: "conversation" %>
  
      <%= form_with url: delete_thread_chat_index_path, method: :post, local: true do %>
      <%= submit_tag "Delete Thread", class: "btn btn-sm btn-block" %>
      <% end %>
      <% end %>
      </div>
  
        <% unless user_signed_in? %>
          <div class="row" style="padding-top: 1.5em">
            <div class="col">
              <center> <p> Please &nbsp; <%= link_to 'Sign in', new_user_session_path, class: 'btn btn-small' %> &nbsp; or <%= link_to 'Sign up', new_user_registration_path, class: 'btn btn-small' %> to use voice to text, generate images, easily email responses, and download your responses as PDF files. Premium features available for only $5 per month, with easy two-click cancellation! </p></center>
            </div>
         </div>
        <% end %>
      </div>
    </div>
  </div>


  <script>
  // We use a query selector to find all forms in the page and add an event listener.
  document.querySelectorAll('form').forEach((form) => {
    form.addEventListener('submit', function(event) {
    event.preventDefault(); // Prevents the default form submission.

    let loadingAnimation = document.querySelector('.lds-roller');
    loadingAnimation.style.display = 'inline-block'; // Display loading animation.

    fetch(this.action, {
      method: this.method,
      body: new FormData(this),
    })
    .then(response => {
      if (!response.ok) { // Check if the HTTP status code is in the 200-299 range.
        throw new Error('Network response was not ok'); // Throw an error if the status is outside the 200-299 range.
      }
      return response.text(); // If your server responds with string or HTML, use response.text().
    })
    .then(data => {
      // When request is successful.
      loadingAnimation.style.display = 'none'; // Hide loading animation.
      
      // Refresh the page
      window.location.reload();
    })
    .catch((error) => {
      // When request fails.
      loadingAnimation.style.display = 'none'; // Hide loading animation.
      console.error('Error:', error);
      
      // Still refresh the page even if an error occurs.
      window.location.reload();
    });
  });
});

  </script>
  <script>
  $(document).ready(function() {
  
    $('#read-response-aloud').click(function() {
    const assistantResponse = '<%= j @assistant_response %>';
    const voiceId = '21m00Tcm4TlvDq8ikWAM';
    const apiKey = '<%= ENV["ELEVENLABS_API_KEY"] %>';

    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/text-to-speech', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', `Bearer ${apiKey}`);
    xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
    xhr.responseType = 'arraybuffer'; // Set the response type to arraybuffer

    xhr.onload = function(e) {
    if (xhr.status === 200) {
      const audioBlob = new Blob([xhr.response], { type: 'audio/mpeg' }); // Create a Blob directly from the response
      const audioUrl = URL.createObjectURL(audioBlob);
      const audio = new Audio(audioUrl);
      audio.play();
    } else {
      console.error("Error: Failed to request audio from Eleven Labs API.");
      alert("Error: Failed to request audio from Eleven Labs API.");
    }
  };

    xhr.send(JSON.stringify({ text: assistantResponse, voice_id: voiceId }));
  });


  });

  </script> 


